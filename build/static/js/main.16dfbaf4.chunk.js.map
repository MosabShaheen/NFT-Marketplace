{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","kryptoBird","state","contract","methods","send","from","account","once","receipt","setState","kryptoBirdz","concat","toConsumableArray","KryptoBird","totalSupply","loadWeb3","loadBlockchainData","detectEthereumProvider","provider","console","log","window","web3","Web3","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","abi","address","Contract","i","alert","_this2","react_default","a","createElement","className","style","color","role","opacity","textAlign","onSubmit","event","preventDefault","value","type","placeholder","ref","input","margin","map","key","mdb_react_ui_kit_esm","maxWidth","src","position","height","marginRight","href","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16dfbaf4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/KryptoBird.json';\r\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n    async componentDidMount(){\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n    // first up is to detect etherum provider\r\n    async loadWeb3() {\r\n        const provider = await detectEthereumProvider();\r\n\r\n        // modern browser\r\n        // if there is a provider then lets\r\n        // lets log that its working and access the window from the doc\r\n        // to set Web3 to the provider\r\n        if(provider) {\r\n            console.log('ethereum wallet is connected')\r\n            window.web3 = new Web3(provider)\r\n        } else {\r\n            // no ethereum provider\r\n            console.log('no ethereum wallet detected')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const accounts = await window.web3.eth.getAccounts()\r\n        this.setState({account:accounts[0]})\r\n\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = KryptoBird.networks[networkId]\r\n         if(networkData) {\r\n             const abi = KryptoBird.abi;\r\n             const address = networkData.address;\r\n             const contract = new web3.eth.Contract(abi, address)\r\n             this.setState({contract})\r\n\r\n             const totalSupply = await contract.methods.totalSupply().call()\r\n             this.setState({totalSupply})\r\n\r\n             for(let i = 1; i <= totalSupply; i++) {\r\n                const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\r\n                this.setState({\r\n                    kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n                })\r\n            }\r\n         } else {\r\n             window.alert('Smart contract not deployed')\r\n         }\r\n    }\r\n    \r\n    // with minting we are sending information and we need to specify the account\r\n\r\n    mint = (kryptoBird) => {\r\n        this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\r\n        .once('receipt', (receipt)=>{\r\n            this.setState({\r\n                kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n            })\r\n        })\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            contract: null,\r\n            totalSupply:0,\r\n            kryptoBirdz:[]\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container-filled\">\r\n                {console.log(this.state.kryptoBirdz)}\r\n                <nav className=\"navbar navbar-dark bg-dark fixed-top flex-md-nowrap p-0 shadow\">\r\n                    <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color:'white'}}>\r\n                        Krypto Birdz NFTs (Non Fungible Tokens)\r\n                    </div>\r\n                    <ul className=\"navbar-nav px-3\">\r\n                        <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\r\n                            <small className=\"text-white\">\r\n                                {this.state.account}\r\n                            </small>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <div className=\"container-fluid mt-1\">\r\n                    <div className=\"row\">\r\n                        <main role='main' className=\"col-lg-12 d-flex text-centre\">\r\n                            <div className=\"content mr-auto ml-auto\" style={{opacity:'0.8', textAlign:\"center\"}}>\r\n                                <h1 style={{color:'black'}}>KryptoBirdz - NFT Marketplace</h1>\r\n                                <form onSubmit={(event)=>{\r\n                                    event.preventDefault()\r\n                                    const kryptoBird = this.kryptoBird.value\r\n                                    this.mint(kryptoBird)\r\n                                }}>\r\n                                    <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Add a file location\"\r\n                                    className=\"form-control mb-1\"\r\n                                    ref={(input)=>this.kryptoBird = input}\r\n                                    />\r\n                                    <input style={{margin:'6px'}}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-primary btn-black\"\r\n                                    value=\"MINT\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                    <hr></hr>\r\n                    <div className=\"row textCenter\">\r\n                        {this.state.kryptoBirdz.map((kryptoBird, key)=>{\r\n                            return(\r\n                                <div>\r\n                                    <div>\r\n                                        <MDBCard className=\"token img\" style={{maxWidth:'22rem'}}>\r\n                                            <MDBCardImage src={kryptoBird} position='top' height='250rem' style={{marginRight:'4px'}}/>\r\n                                            <MDBCardBody>\r\n                                                <MDBCardTitle> KryptoBirdz </MDBCardTitle>\r\n                                                <MDBCardText> The KryptoBirdz are 20 uniquely generated KBirdz from the cyberpunk cloud galaxy Mystopia! There is only one of each bird and each bird can be owned by a single person on the Ethereum blockchain. </MDBCardText>\r\n                                                <MDBBtn href={kryptoBird}>Download</MDBBtn>\r\n                                            </MDBCardBody>\r\n                                        </MDBCard>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}