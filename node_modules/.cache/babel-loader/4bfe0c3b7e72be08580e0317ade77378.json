{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mosab\\\\desktop\\\\nft-marketplace-starter-kit-main\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect etherum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                // modern browser\n                // if there is a provider then lets\n                // lets log that its working and access the window from the doc\n                // to set Web3 to the provider\n                if (provider) {\n                  console.log('ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  // no ethereum provider\n                  console.log('no ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return window.web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark bg-dark fixed-top flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"l\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Mosab\\desktop\\nft-marketplace-starter-kit-main\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","props","state","color"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;IAEMC,G;;;;;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;QAEV;;;;;;;;;;;;;;uBAE2BJ,sBAAsB,E;;;AAAvCK,gBAAAA,Q;;AAEN;AACA;AACA;AACA;AACA,oBAAGA,QAAH,EAAa;AACTC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAC,kBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIV,IAAJ,CAASM,QAAT,CAAd;AACH,iBAHD,MAGO;AACH;AACAC,kBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIKE,gBAAAA,I,GAAOD,MAAM,CAACC,I;;uBACGD,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgBC,WAAhB,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAACF;AAAT,iBAAd;;;;;;;;;;;;;;;;;;AAGJ,eAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTF,MAAAA,OAAO,EAAE;AADA,KAAb;AAFe;AAKlB;;;;6BACQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAqD,QAAA,KAAK,EAAE;AAACG,UAAAA,KAAK,EAAC;AAAP,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADJ,EAII;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,kDAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKD,KAAL,CAAWF,OADhB,CADJ,CADJ,CAJJ,CADJ,CADJ;AAgBH;;;;EApDahB,S;;AAuDlB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/KryptoBird.json';\r\n\r\nclass App extends Component {\r\n\r\n    async componentDidMount(){\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n    // first up is to detect etherum provider\r\n    async loadWeb3() {\r\n        const provider = await detectEthereumProvider();\r\n\r\n        // modern browser\r\n        // if there is a provider then lets\r\n        // lets log that its working and access the window from the doc\r\n        // to set Web3 to the provider\r\n        if(provider) {\r\n            console.log('ethereum wallet is connected')\r\n            window.web3 = new Web3(provider)\r\n        } else {\r\n            // no ethereum provider\r\n            console.log('no ethereum wallet detected')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const accounts = await window.web3.eth.getAccounts()\r\n        this.setState({account:accounts})\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: ''\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-dark bg-dark fixed-top flex-md-nowrap p-0 shadow\">\r\n                    <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color:'white'}}>\r\n                        Krypto Birdz NFTs (Non Fungible Tokens)\r\n                    </div>\r\n                    <ul className=\"navbar-nav px-3\">\r\n                        <l className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\r\n                            <small className=\"text-white\">\r\n                                {this.state.account}\r\n                            </small>\r\n                        </l>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}