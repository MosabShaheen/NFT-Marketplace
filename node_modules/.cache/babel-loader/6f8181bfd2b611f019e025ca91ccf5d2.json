{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mosab\\\\Desktop\\\\nft-marketplace-starter-kit-main\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    // first up is to detect etherum provider\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return detectEthereumProvider;\n\n              case 2:\n                provider = _context.sent;\n\n                // modern browser\n                // if there is a provider then lets\n                // lets log that its working and access the window from the doc\n                // to set Web3 to the provider\n                if (provider) {\n                  console.log('ethereum wallet is connected');\n                  window.Web3 = new Web3(provider);\n                } else {\n                  // no ethereum provider\n                  console.log('no ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"NFT Marketplace\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Mosab\\Desktop\\nft-marketplace-starter-kit-main\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","App","provider","console","log","window"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;IAEMC,G;;;;;;;;;;;;;AACF;;;;;;;;;;;uBAE2BD,sB;;;AAAjBE,gBAAAA,Q;;AAEN;AACA;AACA;AACA;AACA,oBAAGA,QAAH,EAAa;AACTC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAC,kBAAAA,MAAM,CAACN,IAAP,GAAc,IAAIA,IAAJ,CAASG,QAAT,CAAd;AACH,iBAHD,MAGO;AACH;AACAC,kBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;;;;;;;;;;;;;;;;;6BAEI;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,CADJ;AAKH;;;;EAvBaN,S;;AA0BlB,eAAeG,GAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\" \r\n\r\nclass App extends Component {\r\n    // first up is to detect etherum provider\r\n    async loadWeb3() {\r\n        const provider = await detectEthereumProvider;\r\n\r\n        // modern browser\r\n        // if there is a provider then lets\r\n        // lets log that its working and access the window from the doc\r\n        // to set Web3 to the provider\r\n        if(provider) {\r\n            console.log('ethereum wallet is connected')\r\n            window.Web3 = new Web3(provider)\r\n        } else {\r\n            // no ethereum provider\r\n            console.log('no ethereum wallet detected')\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>NFT Marketplace</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}